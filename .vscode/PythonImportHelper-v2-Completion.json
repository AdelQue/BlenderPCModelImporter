[
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "clr",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "clr",
        "description": "clr",
        "detail": "clr",
        "documentation": {}
    },
    {
        "label": "PointCloudReader",
        "importPath": "PointCloudBlender",
        "description": "PointCloudBlender",
        "isExtraImport": true,
        "detail": "PointCloudBlender",
        "documentation": {}
    },
    {
        "label": "ModelReader",
        "importPath": "PointCloudBlender",
        "description": "PointCloudBlender",
        "isExtraImport": true,
        "detail": "PointCloudBlender",
        "documentation": {}
    },
    {
        "label": "UserException",
        "kind": 6,
        "importPath": "importPointCloud",
        "description": "importPointCloud",
        "peekOfCode": "class UserException(Exception):\n    message: str\n    def __init__(self, message: str, *args: object):\n        self.message = message\n        super().__init__(message, *args)\ndef get_path():\n    return ADDON_DIR\ntry:\n    import pythonnet\nexcept ModuleNotFoundError as exc:",
        "detail": "importPointCloud",
        "documentation": {}
    },
    {
        "label": "get_path",
        "kind": 2,
        "importPath": "importPointCloud",
        "description": "importPointCloud",
        "peekOfCode": "def get_path():\n    return ADDON_DIR\ntry:\n    import pythonnet\nexcept ModuleNotFoundError as exc:\n    raise UserException((\"Could not install python.net, please try running blender with\"\n            \" admin rights\")) from exc\npath = os.path.join(get_path(), \"libs\")\ndll_names = [\n    \"PointCloudBlender.dll\"",
        "detail": "importPointCloud",
        "documentation": {}
    },
    {
        "label": "importPointCloud",
        "kind": 2,
        "importPath": "importPointCloud",
        "description": "importPointCloud",
        "peekOfCode": "def importPointCloud(importer):\n    pc = PointCloudReader.LoadPointCloud(importer.filepath)\n    collection = bpy.data.collections.new(os.path.basename(importer.filepath))\n    bpy.context.scene.collection.children.link(collection)\n    for i in pc:\n        if os.path.exists(dirname(importer.filepath) + \"\\\\\" + i.ModelName + \".terrain-model\"):\n            model = ModelReader.Model(dirname(importer.filepath) + \"\\\\\" + i.ModelName + \".terrain-model\", bpy.context.scene.HedgeNeedle)\n            for Mesh in model.meshes:\n                mesh1 = bpy.data.meshes.new(i.ModelName + \" Mesh\")\n                mesh1.use_auto_smooth = True",
        "detail": "importPointCloud",
        "documentation": {}
    },
    {
        "label": "ADDON_DIR",
        "kind": 5,
        "importPath": "importPointCloud",
        "description": "importPointCloud",
        "peekOfCode": "ADDON_DIR = dirname(dirname(dirname(os.path.realpath(__file__)))) + \"\\\\BlenderPCModelImporter\"\nprint(ADDON_DIR)\nADDON_NAME = os.path.basename(ADDON_DIR)\nFILEPATH = \"\"\nclass UserException(Exception):\n    message: str\n    def __init__(self, message: str, *args: object):\n        self.message = message\n        super().__init__(message, *args)\ndef get_path():",
        "detail": "importPointCloud",
        "documentation": {}
    },
    {
        "label": "ADDON_NAME",
        "kind": 5,
        "importPath": "importPointCloud",
        "description": "importPointCloud",
        "peekOfCode": "ADDON_NAME = os.path.basename(ADDON_DIR)\nFILEPATH = \"\"\nclass UserException(Exception):\n    message: str\n    def __init__(self, message: str, *args: object):\n        self.message = message\n        super().__init__(message, *args)\ndef get_path():\n    return ADDON_DIR\ntry:",
        "detail": "importPointCloud",
        "documentation": {}
    },
    {
        "label": "FILEPATH",
        "kind": 5,
        "importPath": "importPointCloud",
        "description": "importPointCloud",
        "peekOfCode": "FILEPATH = \"\"\nclass UserException(Exception):\n    message: str\n    def __init__(self, message: str, *args: object):\n        self.message = message\n        super().__init__(message, *args)\ndef get_path():\n    return ADDON_DIR\ntry:\n    import pythonnet",
        "detail": "importPointCloud",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "importPointCloud",
        "description": "importPointCloud",
        "peekOfCode": "path = os.path.join(get_path(), \"libs\")\ndll_names = [\n    \"PointCloudBlender.dll\"\n]\npythonnet.load(\"coreclr\")\nimport clr\nfor dll_name in dll_names:\n    dll_path = os.path.join(path, dll_name)\n    clr.AddReference(dll_path)\nfrom PointCloudBlender import PointCloudReader",
        "detail": "importPointCloud",
        "documentation": {}
    },
    {
        "label": "dll_names",
        "kind": 5,
        "importPath": "importPointCloud",
        "description": "importPointCloud",
        "peekOfCode": "dll_names = [\n    \"PointCloudBlender.dll\"\n]\npythonnet.load(\"coreclr\")\nimport clr\nfor dll_name in dll_names:\n    dll_path = os.path.join(path, dll_name)\n    clr.AddReference(dll_path)\nfrom PointCloudBlender import PointCloudReader\nfrom PointCloudBlender import ModelReader",
        "detail": "importPointCloud",
        "documentation": {}
    }
]